#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Feb  2 17:41:28 2025

@author: sohaib
"""

#

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from taurex.stellar import BlackbodyStar
from taurex.temperature import Isothermal
from taurex.util.util import create_grid_res
from taurex.parameter.parameterparser import ParameterParser
from taurex.data.spectrum import ArraySpectrum  # Correct import for ArraySpectrum
from taurex.model import TransmissionModel
from taurex.model import EmissionModel
from taurex.contributions import AbsorptionContribution, CIAContribution, RayleighContribution
#from taurex_fastchem import FastChem  # Replace ACEChemistry with FastChem
from taurex.chemistry import TaurexChemistry, ConstantGas
from taurex.cache import OpacityCache,CIACache
from taurex.temperature import Guillot2010
from taurex.planet import Planet
from taurex.binning import FluxBinner,SimpleBinner
from taurex.data.spectrum.observed import ObservedSpectrum
import taurex.log
taurex.log.enableLogging()

 
OpacityCache().clear_cache()
OpacityCache().set_opacity_path("/media/sohaib/My Stuff/inputs/xsec/xsec_sampled_R15000_0.3-15")
h2o_xsec = OpacityCache()['H2O']
print(f"H2O cross-section available for wavenumbers: {h2o_xsec.wavenumberGrid}")
cia_cache=CIACache().set_cia_path("/media/sohaib/My Stuff/inputs/cia/HITRAN/data")
opacity = h2o_xsec.opacity(2000, 1e5)  # Temperature=2000 K, Pressure=1 bar
wavenumbers = h2o_xsec.wavenumberGrid

plt.figure(figsize=(10, 6))
plt.plot(10000 / wavenumbers, opacity)
plt.xlabel('Wavelength (micron)')
plt.ylabel('Opacity')
plt.title('H2O Opacity')
plt.grid(True)
plt.show()

# Load TiO opacity
tio_xsec = OpacityCache()['TiO']

# Get wavenumber grid and opacity data
wavenumbers = tio_xsec.wavenumberGrid
opacity = tio_xsec.opacity(2000, 1e5)  # Example: 2000 K, 1 bar

# Plot the opacity
import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
plt.plot(10000 / wavenumbers, opacity)
plt.xlabel('Wavelength (micron)')
plt.ylabel('Opacity')
plt.title('TiO Opacity at 2000K, 1 bar')
plt.grid(True)
plt.show()

# Path to the CIA file
file_path = '/media/sohaib/My Stuff/inputs/cia/HITRAN/data/H2-H2_2011.cia'

# Initialize storage
wavenumbers = []
coefficients = []
target_temperature = 2000.0  # Example: Target temperature in K
current_temperature = None

# Parse the file
with open(file_path, 'r') as file:
    for line in file:
        # Check if the line is a header (contains the temperature info)
        if "H2-H2" in line:
            # Extract the temperature from the header line
            parts = line.split()
            current_temperature = float(parts[4])  # Temperature is in the 5th column
        elif current_temperature == target_temperature:
            # Parse data lines for the target temperature
            parts = line.split()
            if len(parts) == 2:  # Ensure it's a valid data line
                wavenumbers.append(float(parts[0]))
                coefficients.append(float(parts[1]))

# Check if data was loaded
if not wavenumbers:
    print(f"No data found for temperature {target_temperature} K.")
else:
    # Convert wavenumbers to wavelengths (microns)
    wavelengths = [10000 / wn for wn in wavenumbers]

    # Plot the CIA data
    plt.figure(figsize=(10, 6))
    plt.plot(wavelengths, coefficients, label=f'H2-H2 CIA at {target_temperature}K')
    plt.xlabel('Wavelength (micron)')
    plt.ylabel('CIA Absorption Coefficient')
    plt.title('H2-H2 CIA Absorption Coefficient')
    plt.legend()
    plt.grid(True)
    plt.show()

# Load the 55-Cnc-e spectrum data (observational data)
spectrum_data = pd.read_csv('/home/sohaib/Desktop/masterthesis/wasp107.dat', sep=' ', header=None)
spectrum_data.columns = ['Wavelength', 'Depth', 'Error']


# Extract the necessary columns
wavelengths = spectrum_data['Wavelength'].values
flux = spectrum_data['Depth'].values
flux_error = spectrum_data['Error'].values
#Bin_width = spectrum_data['Bin_Width']
# Plot the observational data
plt.figure(figsize=(12, 6))
plt.errorbar(wavelengths, flux, yerr=flux_error, fmt='o', label='Observed Data', color='red', alpha=0.7)

# Labels and grid
plt.xlabel('Wavelength (micron)')
plt.ylabel("Transit Depth "r"$(R_p / R_*)^2$")
plt.title('JWST NIRCam WASP-107 b Transmission Spectrum (Welbanks et al. 2024)')
plt.legend()
plt.grid(True)

plt.show()

# Define wavelength grid for the modeled spectrum
# Set the wavenumber grid to match the observational range
obs = ObservedSpectrum('/home/sohaib/Desktop/masterthesis/wasp107.dat')



# Define star properties
star = BlackbodyStar(temperature=4200.0, radius=0.66)
# Define a restricted wavenumber grid based on observations
min_wavenumber = 1e4 / 5.13  # Convert 5.13 microns to cm^-1
max_wavenumber = 1e4 / 2.77  # Convert 2.77 microns to cm^-1
# Generate a log-spaced wavelength grid between 2.77 and 5.13 microns
wavelength_grid = np.logspace(np.log10(2.4), np.log10(4.0), 500)
# Convert to wavenumber grid
wngrid = 1e4 / wavelength_grid
  # Linear grid
star.initialize(wngrid)

# Define planet properties
planet = Planet(planet_radius=0.915, planet_mass=0.096) 

# Define atmosphere model

#atmosphere_model = Isothermal(T=750)
from taurex.temperature import Guillot2010
guillot = Guillot2010(T_irr=738.0)

chemistry = TaurexChemistry(fill_gases=['H2', 'He'], ratio=0.85)
chemistry.addGas(ConstantGas('H2O', mix_ratio=1e-3))  #  water vapor
# chemistry.addGas(ConstantGas('CO2', mix_ratio=1e-7))  # Add CO2
# chemistry.addGas(ConstantGas('CH4', mix_ratio=1e-6))  # Methane
# chemistry.addGas(ConstantGas('CO', mix_ratio=1e-6))    # Hydrogen
# chemistry.addGas(ConstantGas('NH3', mix_ratio=1e-7))   # Helium
# chemistry.addGas(ConstantGas('SO2', mix_ratio=1e-7))  

  # Convert to wavenumber
#wngrid = np.linspace(obs_wavenumberGrid.min(), obs_wavenumberGrid.max(), 10000)
# Define the model without wngrid
tm = TransmissionModel(
    planet=planet,
    temperature_profile= guillot,#atmosphere_model,
    chemistry=chemistry,
    star=star,
    atm_min_pressure=1e-9,  # Minimum pressure
    atm_max_pressure=1e2,   # Maximum pressure
    nlayers=150         # Number of vertical layers
)



# Add atmospheric contributions
tm.add_contribution(AbsorptionContribution())
tm.add_contribution(CIAContribution(cia_pairs=['H2-H2', 'H2-He']))
tm.add_contribution(RayleighContribution())
from taurex.contributions import SimpleCloudsContribution
# tm.add_contribution(SimpleCloudsContribution())

tm.build()


# Output the spectrum
# print("Modeled Spectrum:")
# print(spectrum)
# High-resolution modeled spectrum
# Generate high-resolution model spectrum on the observed grid:
model_native_grid, rprs, tau, _ = tm.model(obs.wavenumberGrid)

# Bin the model using the observed binner:
obin = obs.create_binner()
binned_wavenumbers, binned_rprs, _, _ = obin.bin_model((model_native_grid, rprs, tau, None))

# Convert binned wavenumbers to wavelengths for plotting:
binned_wavelengths = 1e4 / binned_wavenumbers

plt.figure(figsize=(10, 6))
# Plot the observed spectrum using a simple scatter/line plot (without error bars)

plt.plot(obs.wavelengthGrid, obs.spectrum, label='Observed Spectrum', color='red')
# Plot the binned model spectrum
plt.plot(binned_wavelengths, binned_rprs, label='Binned Model', color='orange')
plt.xlabel("Wavelength (micron)")
plt.ylabel("Transit Depth "r"$(R_p / R_*)^2$")
plt.legend()
plt.grid(True)
plt.title("Transmission Spectrum with Binned Model")
plt.show()




from taurex.optimizer.nestle import NestleOptimizer
from taurex.optimizer.multinest import MultiNestOptimizer
opt = MultiNestOptimizer(
    multi_nest_path='/home/sohaib/MultiNest-master/MultiNest_v3.12_CMake/multinest',
    observed=obs,
    model=tm,
    num_live_points=50,
)




opt.set_model(tm)
opt.set_observed(obs)

# opt.enable_fit('planet_radius')
# opt.set_boundary('planet_radius', [0.09, 0.12])  # Jupiter radii



# Example: fit T linearly from 250..350
# opt.enable_fit('T')
# opt.set_boundary('T', [500,1000])

#opt.enable_fit('T_irr')
# opt.set_boundary('T_irr', [400,900])

# opt.enable_fit('T_int_guillot')
# opt.set_boundary('T_int_guillot', [200,550])

# opt.enable_fit('kappa_irr')
# opt.set_boundary('kappa_irr', [0.01,0.01])

# opt.enable_fit('alpha')
# opt.set_boundary('alpha', [0.5,2])

opt.enable_fit('planet_radius')
opt.set_boundary('planet_radius', [0.85,1.05])

# Example: fit log10(H2O) from 1e-9..1e-2
opt.enable_fit('H2O')
opt.set_boundary('H2O',[1e-12,1e-1])

# # Similarly for other gases
# opt.enable_fit('CO2')
# opt.set_boundary('CO2',[1e-12,1e-1])

# opt.enable_fit('CH4')
# opt.set_boundary('CH4',[1e-12,1e-1])

# opt.enable_fit('CO')
# opt.set_boundary('CO',[1e-12,1e-1])

# opt.enable_fit('NH3')
# opt.set_boundary('NH3',[1e-12,1e-1])

# opt.enable_fit('SO2')
# opt.set_boundary('SO2',[1e-12,1e-1])

# opt.enable_fit('clouds_pressure')
# opt.set_boundary('clouds_pressure',[1e-9,1e-1])

# Run the optimizer
opt.compute_fit()

solution = opt.get_solution()






    
solutions = list(opt.get_solution())

for sol in solutions:
    solution_no, map_array, median_array, extra = sol

    # 'extra' is a tuple of four (key, value) pairs. We can index them directly:
    stats       = extra[0][1]  # if extra[0][0] == "statistics"
    fit_params  = extra[1][1]  # if extra[1][0] == "fit_params"
    trace_data  = extra[2][1]  # if extra[2][0] == "tracedata"
    weights     = extra[3][1]  # if extra[3][0] == "weights"

    print(f"Solution no: {solution_no}")
    print("  MAP array:", map_array)
    print("  Median array:", median_array)
    print("  Statistics (logZ or chisq, etc.):", stats)
    print("  Fit params dict:", fit_params)
    print("  Trace data shape:", trace_data.shape)
    print("  Weights shape:", weights.shape)




import corner
import matplotlib.pyplot as plt
import numpy as np



param_order = ["planet_radius", "log_H2O"] #"log_CO", "log_CO2", "log_NH3","log_clouds_pressure"]
labels = [
    #r"$T\ (\mathrm{K})$",
   # r"$T_int_guillot\ (\mathrm{K})$",                      # Temperature "T_int_guillot","log_CH4"
    r"$R_{\mathrm{p}} / R_{\mathrm{J}}$",     # Planet radius in Jupiter radii
    r"$\log_{10}(\mathrm{H_2O})$",            # Water
   # r"$\log_{10}(\mathrm{CH_4})$",            # Methane
    # r"$\log_{10}(\mathrm{CO})$",              # Carbon Monoxide
    # r"$\log_{10}(\mathrm{CO_2})$",            # Carbon Dioxide
    # r"$\log_{10}(\mathrm{NH_3})$",
    # # r"$\log_{10}(\mathrm{SO_2})$",            # Ammonia
    # r"$\log_{10}(P_{\mathrm{clouds}})$"       # Cloud-top pressure
]



import pandas as pd

param_table = []
for p in param_order:
    median_val = fit_params[p]['value']      # typically the median
    lower_err  = fit_params[p]['sigma_m']    # negative 1-sigma from median
    upper_err  = fit_params[p]['sigma_p']    # positive 1-sigma
    row = {
        'Parameter': p,
        'Median': f"{median_val:.3f}",
        '-1σ': f"{lower_err:.3f}",
        '+1σ': f"{upper_err:.3f}"
    }
    param_table.append(row)

df_params = pd.DataFrame(param_table)
print(df_params.to_string(index=False))
# Map gases to their key absorption wavelengths (in microns)
retrieved_values = {
    row['Parameter']: (float(row['Median']), float(row['-1σ']), float(row['+1σ']))
    for _, row in df_params.iterrows()
}

import matplotlib.pyplot as plt
import numpy as np

import matplotlib.pyplot as plt
import numpy as np

# Literature absorption ranges for WASP 107b (in microns) for H2O and CH4 only
absorption_lines = {
    "log_H2O": [1.4, 2.7],   # Water absorption band (range)
    "log_CH4": [2.3, 3.3],   # Methane absorption band (range)
}

# Define colors for each gas
gas_colors = {
    "log_H2O": "blue",
    "log_CH4": "green",
}

# Define the observed wavelength range (in microns)
obs_range_low = 2.4
obs_range_high = 3.98

# Loop over the retrieval solutions (your retrieval framework)
for solution, optimized_map, optimized_value, values in opt.get_solution():
    opt.update_model(optimized_map)
    
    # Generate the binned model spectrum from your transmission model
    binned_model = obin.bin_model(tm.model(obs.wavenumberGrid))[1]
    
    plt.figure(figsize=(12, 6))
    
    # Plot the observed spectrum with error bars
    plt.errorbar(
        obs.wavelengthGrid, obs.spectrum, yerr=obs.errorBar,
        fmt='o', color='black', ecolor='gray', label='Observations', alpha=0.8
    )
    
    # Plot the modeled spectrum
    plt.plot(
        obs.wavelengthGrid, binned_model,
        label='Modeled Spectrum (Taurex3)', color='blue', lw=2
    )
    
    # Ensure the x-axis remains limited to the observed wavelength range
    plt.xlim(obs_range_low, obs_range_high)
    
    # Capture the current y-axis limits so they are not affected by the shading
    current_ylim = plt.ylim()  # returns (ymin, ymax)
    
    # Overlay only the absorption bands for H2O and CH4
    for gas, wavelengths in absorption_lines.items():
        color = gas_colors.get(gas, "red")
        # Extract a cleaner gas name (e.g., "H2O" from "log_H2O")
        gas_name = gas.split("_")[1] if "_" in gas else gas
        
        # Check that the wavelengths are given as a range (two values)
        if isinstance(wavelengths, list) and len(wavelengths) == 2:
            low, high = wavelengths
            
            # Check if the absorption band overlaps with the observed range
            if high < obs_range_low or low > obs_range_high:
                continue  # Skip if no overlap
            
            # Clip the absorption region to the observed wavelength range
            low_clip = max(low, obs_range_low)
            high_clip = min(high, obs_range_high)
            
            # Shade the absorption region using the current y-axis limits
            plt.fill_betweenx(
                current_ylim,
                low_clip, high_clip,
                color=color, alpha=0.2, label=f"{gas_name} absorption"
            )
            
            # Draw dashed vertical lines at the edges of the absorption region
            plt.axvline(low_clip, color=color, linestyle='--', alpha=0.8)
            plt.axvline(high_clip, color=color, linestyle='--', alpha=0.8)
            
            # Annotate the region (placing the text near the top of the plot)
            mid_point = (low_clip + high_clip) / 2.0
            plt.text(mid_point, current_ylim[1]*0.95, gas_name,
                     color=color, rotation=90, fontsize=10, ha='center')
    
    # Add labels, title, legend, and grid
    plt.xlabel("Wavelength (µm)")
    plt.ylabel("Transit Depth "r"$(R_p / R_*)^2$")
    plt.title("WASP 107b - Observed vs Modeled Transmission Spectrum\nwith H₂O and CH₄ Absorption Bands")
    plt.legend()
    plt.grid(alpha=0.5)
    plt.tight_layout()
    plt.show()


# (Optional) Print the parameter table if needed
print("Retrieved Parameters and Uncertainties:")
print(df_params.to_string(index=False))

# Print parameter table
print("Retrieved Parameters and Uncertainties:")
print(df_params.to_string(index=False))

# Define colors for the corner plot
corner_color = "darkgreen"
corner_kwargs = {
    "color": corner_color,
    "bins": 30,
    "smooth": 1.0,  # Optional: Smooth histograms
    "show_titles": True,
    "title_fmt": ".2f",  # Format titles
    "title_kwargs": {"fontsize": 10},  # Adjust font size for titles
    "label_kwargs": {"fontsize": 12},  # Adjust font size for labels
    "quantiles": [0.16, 0.5, 0.84],  # Add quantile lines
}

# Prepare posterior samples from traces
all_traces = []
for p in param_order:
    all_traces.append(fit_params[p]['trace'])
posterior_samples = np.column_stack(all_traces)

# Plot the corner plot
fig_corner = corner.corner(
    posterior_samples,
    labels=labels,
    hist_kwargs={"color": corner_color},  # Histogram color
    contour_kwargs={"colors": [corner_color]},  # Contour color
    **corner_kwargs
)

# Add a title to the corner plot
fig_corner.suptitle("Posterior Distributions (WASP 107b)", fontsize=17)
plt.show()


import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

# Define the retrieved molecules (Only those available in retrieved_values)
retrieved_molecules = ["log_H2O", "log_CH4", "log_NH3", "log_CO", "log_CO2"]
colors = ["blue", "green", "purple", "black", "red"]

# Define pressure range (log scale)
pressure = np.logspace(-6, 2, 100)  # From 1 microbar to 100 bar

# Create subplots
fig, axes = plt.subplots(2, 3, figsize=(12, 8), sharey=True)
axes = axes.flatten()

for i, gas in enumerate(retrieved_molecules):
    ax = axes[i]
    color = colors[i]
    
    # Skip plotting if gas data is missing
    if gas not in retrieved_values:
        ax.set_visible(False)
        continue
    
    # Extract retrieved values
    median = retrieved_values[gas][0]
    lower_1sigma = retrieved_values[gas][1]
    upper_1sigma = retrieved_values[gas][2]
    
    # Ensure uncertainty bounds are meaningful (Prevent extreme cases)
    uncertainty_range = abs(upper_1sigma - lower_1sigma)
    if uncertainty_range > 5:  # Cap extreme uncertainties
        lower_1sigma = median - 1.5
        upper_1sigma = median + 1.5
    
    # Compute wider confidence intervals (2σ and 3σ)
    lower_2sigma = lower_1sigma - uncertainty_range
    upper_2sigma = upper_1sigma + uncertainty_range
    lower_3sigma = lower_1sigma - 2 * uncertainty_range
    upper_3sigma = upper_1sigma + 2 * uncertainty_range
    
    sigma_low = min(lower_1sigma, upper_1sigma)
    sigma_high = max(lower_1sigma, upper_1sigma)
    std_dev = (sigma_high - sigma_low) / 2
    
    # Avoid invalid standard deviations (set a minimum threshold)
    std_dev = max(std_dev, 1e-2)  # Increased minimum threshold
    
    # Generate a normal distribution to simulate posterior samples
    trace_samples = np.random.normal(median, std_dev, size=1000)
    
    # Plot posterior histogram in the background
    sns.histplot(trace_samples, bins=30, kde=True, color=color, alpha=0.3, ax=ax, orientation="horizontal")
    
    # Plot median profile as solid line
    ax.plot([median] * len(pressure), pressure, color=color, linestyle='-', linewidth=2)
    
    # Plot 1σ confidence region
    ax.fill_betweenx(pressure, lower_1sigma, upper_1sigma, color=color, alpha=0.3, label="1σ")
    
    # Plot 2σ confidence region
    ax.fill_betweenx(pressure, lower_2sigma, upper_2sigma, color=color, alpha=0.2, label="2σ")
    
    # Plot 3σ confidence region
    ax.fill_betweenx(pressure, lower_3sigma, upper_3sigma, color=color, alpha=0.1, label="3σ")
    
    # Add red shaded region (highlighting a specific pressure range)
    ax.axhspan(1e-2, 1e-1, color='red', alpha=0.2)
    
    # Dynamic X-axis limits based on data
    ax.set_xlim([median - 2, median + 2])
    ax.set_ylim([1e-6, 1e2])
    ax.set_xscale("linear")
    ax.set_yscale("log")
    ax.set_xlabel(f"log10({gas.replace('log_', '')})")
    ax.set_title(gas.replace("log_", ""))
    
    ax.legend()

axes[0].set_ylabel("Pressure (bar)")
axes[3].set_ylabel("Pressure (bar)")

plt.tight_layout()
plt.show()
